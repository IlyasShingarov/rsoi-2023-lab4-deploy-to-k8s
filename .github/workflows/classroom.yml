name: GitHub Classroom Workflow
on:
  push:
    branches: [ master ]
jobs:
  build:
    name: Autograding
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: docker/setup-buildx-action@v2

      # TODO build, publish to docker hub, deploy to k8s

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'oracle'
          cache: 'gradle'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@ccb4328a959376b642e027874838f60f8e596de3

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        
      - name: Build CarService & API
        run: |
          chmod +x ./CarService/gradlew
          cd CarService && ./gradlew :CarServiceApi:clean :CarServiceApi:publishToMavenLocal :CarServiceImpl:clean :CarServiceImpl:bootJar
      
      - name: Build RentalService & API
        run: |
          chmod +x ./RentalService/gradlew
          cd RentalService && ./gradlew :RentalServiceApi:clean :RentalServiceApi:publishToMavenLocal :RentalServiceImpl:clean :RentalServiceImpl:bootJar

      - name: Build PaymentService & API
        run: |
          chmod +x ./PaymentService/gradlew
          cd PaymentService && ./gradlew :PaymentServiceApi:clean :PaymentServiceApi:publishToMavenLocal :PaymentServiceImpl:clean :PaymentServiceImpl:bootJar

      - name: Build GatewayService
        run: |
          chmod +x ./GatewayService/gradlew
          cd GatewayService && ./gradlew :GatewayImpl:clean :GatewayImpl:bootJar

      - name: Build images
        timeout-minutes: 10
        run: docker compose build

      - name: Docker Hub login
        env:
          CRYANDEX_PASSWORD: ${{ secrets.CRYANDEX_PASSWORD }}
        run: echo "$CRYANDEX_PASSWORD" | docker login -u oauth --password-stdin cr.yandex

      - name: Docker Publish
        run: docker compose push

      - name: Install HELM
        uses: azure/setup-helm@v3

      - name: Prepare Kubeconfig
        env:
          KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
          KUBECONFIG_CA_FILE: '${{ secrets.KUBECONFIG_CA }}'
        run: |
          echo "$KUBECONFIG_FILE" > ./kube.config
          echo "$KUBECONFIG_CA_FILE" > ./ca.pem

      - name: 'Deploy Postgresql Database'
        run: |
          export HELM_OPERATION=install
          helm --kubeconfig ./kube.config status db
          if [ $? -eq 0 ]
            then HELM_OPERATION=upgrade
          fi
          helm --kubeconfig ./kube.config $HELM_OPERATION db ./k8s/postgres-chart

      - name: Run API Tests
        uses: matt-ball/newman-action@master
        with:
          collection: v3/postman/collection.json
          environment: v3/postman/environment.json
          delayRequest: 100
          reporters: '[ "cli" ]'

